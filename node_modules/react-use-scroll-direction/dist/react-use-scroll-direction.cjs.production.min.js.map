{"version":3,"file":"react-use-scroll-direction.cjs.production.min.js","sources":["../src/domUtils.ts","../src/useScrollDirection.ts"],"sourcesContent":["type ListenerFn = () => any\n\nexport function getScrollTop(target?: HTMLElement) {\n  if (target) return target.scrollTop\n  return (\n    window.scrollY ||\n    window.pageYOffset ||\n    document.body.scrollTop ||\n    (document.documentElement && document.documentElement.scrollTop) ||\n    0\n  )\n}\n\nexport function getScrollLeft(target?: HTMLElement) {\n  if (target) return target.scrollLeft\n  return (\n    window.scrollX ||\n    window.pageXOffset ||\n    document.body.scrollLeft ||\n    (document.documentElement && document.documentElement.scrollLeft) ||\n    0\n  )\n}\n\nexport function isBrowser() {\n  return typeof window === 'object'\n}\n\nexport function addScrollListener(listener: ListenerFn, target: HTMLElement | Document = document) {\n  return target.addEventListener('scroll', listener)\n}\n\nexport function removeScrollListener(\n  listener: ListenerFn,\n  target: HTMLElement | Document = document\n) {\n  return target.removeEventListener('scroll', listener)\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport {\n  isBrowser,\n  getScrollTop,\n  getScrollLeft,\n  addScrollListener,\n  removeScrollListener,\n} from './domUtils'\n\nexport type ScrollDirection = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT' | null\n\nexport interface ScrollDirectionHookResult {\n  isScrolling: boolean\n  isScrollingX: boolean\n  isScrollingY: boolean\n  isScrollingUp: boolean\n  isScrollingDown: boolean\n  isScrollingLeft: boolean\n  isScrollingRight: boolean\n  scrollDirection: ScrollDirection\n  scrollTargetRef: (node: HTMLElement) => void\n}\n\nexport function useScrollDirection(target?: HTMLElement): ScrollDirectionHookResult {\n  const [targetFromApi, setTargetFromApi] = useState<HTMLElement | undefined>()\n  const [targetFromProps, setTargetFromProps] = useState<HTMLElement | undefined>()\n  const [scrollDirection, setScrollDirection] = useState<ScrollDirection>(null)\n  const targetToUse = targetFromProps || targetFromApi\n\n  const isScrolling = scrollDirection !== null\n  const isScrollingX = scrollDirection === 'LEFT' || scrollDirection === 'RIGHT'\n  const isScrollingY = scrollDirection === 'UP' || scrollDirection === 'DOWN'\n  const isScrollingUp = scrollDirection === 'UP'\n  const isScrollingDown = scrollDirection === 'DOWN'\n  const isScrollingLeft = scrollDirection === 'LEFT'\n  const isScrollingRight = scrollDirection === 'RIGHT'\n\n  const scrollTargetRef = useCallback((node: HTMLElement) => {\n    setTargetFromApi(node)\n  }, [])\n\n  useEffect(() => {\n    setTargetFromProps(target)\n  }, [target])\n\n  useEffect(() => {\n    if (isBrowser()) {\n      let scrollTimeout: number\n      let lastScrollTop = getScrollTop(targetToUse)\n      let lastScrollLeft = getScrollLeft(targetToUse)\n\n      const handleScroll = () => {\n        // Reset scroll direction when scrolling stops\n        window.clearTimeout(scrollTimeout)\n        scrollTimeout = window.setTimeout(() => {\n          setScrollDirection(null)\n        }, 66)\n\n        // Set vertical direction while scrolling\n        const scrollTop = getScrollTop(targetToUse)\n        if (scrollTop > lastScrollTop) {\n          setScrollDirection('DOWN')\n        } else if (scrollTop < lastScrollTop) {\n          setScrollDirection('UP')\n        }\n        lastScrollTop = scrollTop\n\n        // Set horizontal scroll direction\n        const scrollLeft = getScrollLeft(targetToUse)\n        if (scrollLeft > lastScrollLeft) {\n          setScrollDirection('RIGHT')\n        } else if (scrollLeft < lastScrollLeft) {\n          setScrollDirection('LEFT')\n        }\n        lastScrollLeft = scrollLeft\n      }\n\n      addScrollListener(handleScroll, targetToUse)\n      return () => removeScrollListener(handleScroll, targetToUse)\n    }\n  }, [targetToUse])\n\n  return {\n    isScrolling,\n    isScrollingX,\n    isScrollingY,\n    isScrollingUp,\n    isScrollingDown,\n    isScrollingLeft,\n    isScrollingRight,\n    scrollDirection,\n    scrollTargetRef,\n  }\n}\n"],"names":["getScrollTop","target","scrollTop","window","scrollY","pageYOffset","document","body","documentElement","getScrollLeft","scrollLeft","scrollX","pageXOffset","useState","targetFromApi","setTargetFromApi","targetFromProps","setTargetFromProps","scrollDirection","setScrollDirection","targetToUse","isScrolling","isScrollingX","isScrollingY","isScrollingUp","isScrollingDown","isScrollingLeft","isScrollingRight","scrollTargetRef","useCallback","node","useEffect","scrollTimeout","lastScrollTop","lastScrollLeft","handleScroll","clearTimeout","setTimeout","listener","addEventListener","addScrollListener","removeEventListener","removeScrollListener"],"mappings":"oGAEgBA,EAAaC,UACvBA,EAAeA,EAAOC,UAExBC,OAAOC,SACPD,OAAOE,aACPC,SAASC,KAAKL,WACbI,SAASE,iBAAmBF,SAASE,gBAAgBN,WACtD,WAIYO,EAAcR,UACxBA,EAAeA,EAAOS,WAExBP,OAAOQ,SACPR,OAAOS,aACPN,SAASC,KAAKG,YACbJ,SAASE,iBAAmBF,SAASE,gBAAgBE,YACtD,sCCG+BT,SACSY,aAAnCC,OAAeC,SACwBF,aAAvCG,OAAiBC,SACsBJ,WAA0B,MAAjEK,OAAiBC,OAClBC,EAAcJ,GAAmBF,EAEjCO,EAAkC,OAApBH,EACdI,EAAmC,SAApBJ,GAAkD,UAApBA,EAC7CK,EAAmC,OAApBL,GAAgD,SAApBA,EAC3CM,EAAoC,OAApBN,EAChBO,EAAsC,SAApBP,EAClBQ,EAAsC,SAApBR,EAClBS,EAAuC,UAApBT,EAEnBU,EAAkBC,eAAY,SAACC,GACnCf,EAAiBe,KAChB,WAEHC,aAAU,WACRd,EAAmBhB,KAClB,CAACA,IAEJ8B,aAAU,cDpBe,iBAAX5B,OCqBK,KACX6B,EACAC,EAAgBjC,EAAaoB,GAC7Bc,EAAiBzB,EAAcW,GAE7Be,EAAe,WAEnBhC,OAAOiC,aAAaJ,GACpBA,EAAgB7B,OAAOkC,YAAW,WAChClB,EAAmB,QAClB,QAGGjB,EAAYF,EAAaoB,GAC3BlB,EAAY+B,EACdd,EAAmB,QACVjB,EAAY+B,GACrBd,EAAmB,MAErBc,EAAgB/B,MAGVQ,EAAaD,EAAcW,GAC7BV,EAAawB,EACff,EAAmB,SACVT,EAAawB,GACtBf,EAAmB,QAErBe,EAAiBxB,mBD9CS4B,EAAsBrC,YAAAA,IAAAA,EAAiCK,UAChFL,EAAOsC,iBAAiB,SAAUD,GCgDrCE,CAAkBL,EAAcf,GACzB,2BD7CXkB,EACArC,mBAAAA,IAAAA,EAAiCK,UAE1BL,EAAOwC,oBAAoB,SAAUH,GC0C3BI,CAAqBP,EAAcf,OAEjD,CAACA,IAEG,CACLC,YAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAC,iBAAAA,EACAT,gBAAAA,EACAU,gBAAAA"}