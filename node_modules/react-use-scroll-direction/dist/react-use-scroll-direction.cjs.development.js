'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

function getScrollTop(target) {
  if (target) return target.scrollTop;
  return window.scrollY || window.pageYOffset || document.body.scrollTop || document.documentElement && document.documentElement.scrollTop || 0;
}
function getScrollLeft(target) {
  if (target) return target.scrollLeft;
  return window.scrollX || window.pageXOffset || document.body.scrollLeft || document.documentElement && document.documentElement.scrollLeft || 0;
}
function isBrowser() {
  return typeof window === 'object';
}
function addScrollListener(listener, target) {
  if (target === void 0) {
    target = document;
  }

  return target.addEventListener('scroll', listener);
}
function removeScrollListener(listener, target) {
  if (target === void 0) {
    target = document;
  }

  return target.removeEventListener('scroll', listener);
}

function useScrollDirection(target) {
  var _useState = react.useState(),
      targetFromApi = _useState[0],
      setTargetFromApi = _useState[1];

  var _useState2 = react.useState(),
      targetFromProps = _useState2[0],
      setTargetFromProps = _useState2[1];

  var _useState3 = react.useState(null),
      scrollDirection = _useState3[0],
      setScrollDirection = _useState3[1];

  var targetToUse = targetFromProps || targetFromApi;
  var isScrolling = scrollDirection !== null;
  var isScrollingX = scrollDirection === 'LEFT' || scrollDirection === 'RIGHT';
  var isScrollingY = scrollDirection === 'UP' || scrollDirection === 'DOWN';
  var isScrollingUp = scrollDirection === 'UP';
  var isScrollingDown = scrollDirection === 'DOWN';
  var isScrollingLeft = scrollDirection === 'LEFT';
  var isScrollingRight = scrollDirection === 'RIGHT';
  var scrollTargetRef = react.useCallback(function (node) {
    setTargetFromApi(node);
  }, []);
  react.useEffect(function () {
    setTargetFromProps(target);
  }, [target]);
  react.useEffect(function () {
    if (isBrowser()) {
      var scrollTimeout;
      var lastScrollTop = getScrollTop(targetToUse);
      var lastScrollLeft = getScrollLeft(targetToUse);

      var handleScroll = function handleScroll() {
        // Reset scroll direction when scrolling stops
        window.clearTimeout(scrollTimeout);
        scrollTimeout = window.setTimeout(function () {
          setScrollDirection(null);
        }, 66); // Set vertical direction while scrolling

        var scrollTop = getScrollTop(targetToUse);

        if (scrollTop > lastScrollTop) {
          setScrollDirection('DOWN');
        } else if (scrollTop < lastScrollTop) {
          setScrollDirection('UP');
        }

        lastScrollTop = scrollTop; // Set horizontal scroll direction

        var scrollLeft = getScrollLeft(targetToUse);

        if (scrollLeft > lastScrollLeft) {
          setScrollDirection('RIGHT');
        } else if (scrollLeft < lastScrollLeft) {
          setScrollDirection('LEFT');
        }

        lastScrollLeft = scrollLeft;
      };

      addScrollListener(handleScroll, targetToUse);
      return function () {
        return removeScrollListener(handleScroll, targetToUse);
      };
    }
  }, [targetToUse]);
  return {
    isScrolling: isScrolling,
    isScrollingX: isScrollingX,
    isScrollingY: isScrollingY,
    isScrollingUp: isScrollingUp,
    isScrollingDown: isScrollingDown,
    isScrollingLeft: isScrollingLeft,
    isScrollingRight: isScrollingRight,
    scrollDirection: scrollDirection,
    scrollTargetRef: scrollTargetRef
  };
}

exports.useScrollDirection = useScrollDirection;
//# sourceMappingURL=react-use-scroll-direction.cjs.development.js.map
