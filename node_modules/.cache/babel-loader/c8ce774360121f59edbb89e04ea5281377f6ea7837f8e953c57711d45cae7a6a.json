{"ast":null,"code":"import{useState}from'react';import'./TicTacToe.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function TicTacToe(){const[board,setBoard]=useState(Array(3).fill('').map(()=>Array(3).fill('')));const[turn,setTurn]=useState('X');const[turnQueue,setQueue]=useState([]);// Check row, column, diagonals of latest move\n// Verify all corresponding squares are equal\nconst checkWin=(xIndex,yIndex)=>{console.log('Checking Win');console.log('x = '+xIndex);console.log('y = '+yIndex);// Check if row is a win\nfor(let y=0;y<board.length;y++){if(board[xIndex][y]!==turn)break;else if(y===board.length-1)return true;}// Check if column is a win\nfor(let x=0;x<board.length;x++){if(board[x][yIndex]!==turn)break;else if(x===board.length-1)return true;}// Check diagonal\nif(xIndex===yIndex){for(let a=0;a<board.length;a++){if(board[a][a]!==turn)break;else if(a===board.length-1)return true;}}// Check anti-diagonal\nif(parseInt(xIndex)+parseInt(yIndex)===2){for(let a=0;a<board.length;a++){if(board[a][2-a]!==turn)break;else if(a===board.length-1)return true;}}return false;};// Clear move that has opacity at 50% before clearing everything else\nconst reset=()=>{let queue=[...turnQueue];const removeTurn=queue.shift();let box=document.getElementById(removeTurn[0]+removeTurn[1]);box.className='box';setQueue([]);setTurn('X');setBoard(Array(3).fill('').map(()=>Array(3).fill('')));};const move=e=>{const xIndex=e.target.getAttribute('x-index');const yIndex=e.target.getAttribute('y-index');// Prevent clicking on occupied square\nif(board[xIndex][yIndex]!=='')return;// Create shallow copies to change state\nlet newBoard=[...board];let queue=[...turnQueue];newBoard[xIndex][yIndex]=turn;// Change opacity of next cleared square\nif(queue.length===5){const xCord=queue[0][0];const yCord=queue[0][1];let box=document.getElementById(xCord+yCord);box.className=box.className+' to-go';}// Remove a move, and return opacity back to normal\nif(queue.length>5){const removeTurn=queue.shift();newBoard[removeTurn[0]][removeTurn[1]]='';const xCord=queue[0][0];const yCord=queue[0][1];let box=document.getElementById(xCord+yCord);box.className=box.className+' to-go';box=document.getElementById(removeTurn[0]+removeTurn[1]);console.log(box);box.className='box';}setBoard(newBoard);queue.push([xIndex,yIndex]);setQueue(queue);if(checkWin(xIndex,yIndex)){alert('You Win!');}if(turn==='X')setTurn('O');else setTurn('X');};return/*#__PURE__*/_jsxs(\"div\",{className:\"main\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"title\",children:\"TicTacToe\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"turn-text\",children:[\"It's \",turn,\"'s' turn\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:board.map((content,x)=>content.map((symbol,y)=>/*#__PURE__*/_jsx(\"div\",{className:\"box\",onClick:move,id:x.toString()+y.toString(),\"x-index\":x,\"y-index\":y,children:symbol},x.toString()+y.toString())))}),/*#__PURE__*/_jsx(\"button\",{className:\"reset-button\",onClick:reset,children:\"Reset\"})]});}export default TicTacToe;","map":{"version":3,"names":["useState","jsx","_jsx","jsxs","_jsxs","TicTacToe","board","setBoard","Array","fill","map","turn","setTurn","turnQueue","setQueue","checkWin","xIndex","yIndex","console","log","y","length","x","a","parseInt","reset","queue","removeTurn","shift","box","document","getElementById","className","move","e","target","getAttribute","newBoard","xCord","yCord","push","alert","children","content","symbol","onClick","id","toString"],"sources":["/home/roan/tanuarta.github.io/tanuarta/src/Pages/TicTacToe.js"],"sourcesContent":["import { useState } from 'react';\nimport './TicTacToe.css';\n\nfunction TicTacToe() {\n\n  const [board, setBoard] = useState(Array(3).fill('').map(() => Array(3).fill('')));\n  const [turn, setTurn] = useState('X')\n  const [turnQueue, setQueue] = useState([])\n\n  // Check row, column, diagonals of latest move\n  // Verify all corresponding squares are equal\n  const checkWin = (xIndex, yIndex) => {\n    console.log('Checking Win')\n    console.log('x = ' + xIndex)\n    console.log('y = ' + yIndex)\n\n    // Check if row is a win\n    for (let y = 0; y < board.length; y++) {\n      if (board[xIndex][y] !== turn) break;\n      else if (y === board.length - 1) return true; \n    }\n\n    // Check if column is a win\n    for (let x = 0; x < board.length; x++) {\n      if (board[x][yIndex] !== turn) break;\n      else if (x === board.length - 1) return true;\n    }\n\n    // Check diagonal\n    if (xIndex === yIndex) {\n      for (let a = 0; a < board.length; a++) {\n        if (board[a][a] !== turn) break;\n        else if (a === board.length - 1) return true;\n      }\n    }\n\n    // Check anti-diagonal\n    if (parseInt(xIndex) + parseInt(yIndex) === 2) {\n      for (let a = 0; a < board.length; a++) {\n        if (board[a][2 - a] !== turn) break;\n        else if (a === board.length - 1) return true; \n      }\n    }\n\n    return false\n  }\n\n  // Clear move that has opacity at 50% before clearing everything else\n  const reset = () => {\n    let queue = [...turnQueue]\n\n    const removeTurn = queue.shift()\n    let box = document.getElementById(removeTurn[0] + removeTurn[1])\n    box.className = 'box'\n    \n    setQueue([])\n    setTurn('X')\n    setBoard(Array(3).fill('').map(() => Array(3).fill('')))\n    \n  }\n \n  const move = (e) => {\n    const xIndex = e.target.getAttribute('x-index');\n    const yIndex = e.target.getAttribute('y-index');\n\n    // Prevent clicking on occupied square\n    if (board[xIndex][yIndex] !== '') return\n    \n    \n    // Create shallow copies to change state\n    let newBoard = [...board]\n    let queue = [...turnQueue]\n    newBoard[xIndex][yIndex] = turn\n\n    // Change opacity of next cleared square\n    if (queue.length === 5) {\n      const xCord = queue[0][0]\n      const yCord = queue[0][1]\n\n      let box = document.getElementById(xCord + yCord)\n      box.className = box.className + ' to-go'\n    }\n\n    // Remove a move, and return opacity back to normal\n    if (queue.length > 5) {\n      const removeTurn = queue.shift()\n      newBoard[removeTurn[0]][removeTurn[1]] = ''\n\n      const xCord = queue[0][0]\n      const yCord = queue[0][1]\n\n      let box = document.getElementById(xCord + yCord)\n      box.className = box.className + ' to-go'\n\n      box = document.getElementById(removeTurn[0] + removeTurn[1])\n      console.log(box)\n      box.className = 'box'\n    }\n    \n    setBoard(newBoard)\n    queue.push([xIndex, yIndex])\n    setQueue(queue)\n\n    if (checkWin(xIndex, yIndex)) {\n      alert('You Win!');\n    }\n\n    if (turn === 'X') setTurn('O');\n    else setTurn('X')\n  }\n\n  return (\n    <div className=\"main\">\n\n      <span className='title'>\n        TicTacToe\n      </span>\n\n      <span className='turn-text'>\n        It's {turn}'s' turn\n      </span>\n\n      <div className='board'>\n        {\n          board.map((content, x) =>\n            content.map((symbol, y) => \n              <div className='box' onClick={move} id={x.toString() + y.toString()} key={x.toString() + y.toString()} x-index={x} y-index={y}>{symbol}</div>\n            )\n          )\n        }\n      </div>\n\n      <button className='reset-button' onClick={reset}>Reset</button>\n    </div>\n  );\n}\n\nexport default TicTacToe;\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzB,QAAS,CAAAC,SAASA,CAAA,CAAG,CAEnB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,IAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAClF,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,GAAG,CAAC,CACrC,KAAM,CAACa,SAAS,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAE1C;AACA;AACA,KAAM,CAAAe,QAAQ,CAAGA,CAACC,MAAM,CAAEC,MAAM,GAAK,CACnCC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAC3BD,OAAO,CAACC,GAAG,CAAC,MAAM,CAAGH,MAAM,CAAC,CAC5BE,OAAO,CAACC,GAAG,CAAC,MAAM,CAAGF,MAAM,CAAC,CAE5B;AACA,IAAK,GAAI,CAAAG,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGd,KAAK,CAACe,MAAM,CAAED,CAAC,EAAE,CAAE,CACrC,GAAId,KAAK,CAACU,MAAM,CAAC,CAACI,CAAC,CAAC,GAAKT,IAAI,CAAE,MAAM,IAChC,IAAIS,CAAC,GAAKd,KAAK,CAACe,MAAM,CAAG,CAAC,CAAE,MAAO,KAAI,CAC9C,CAEA;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGhB,KAAK,CAACe,MAAM,CAAEC,CAAC,EAAE,CAAE,CACrC,GAAIhB,KAAK,CAACgB,CAAC,CAAC,CAACL,MAAM,CAAC,GAAKN,IAAI,CAAE,MAAM,IAChC,IAAIW,CAAC,GAAKhB,KAAK,CAACe,MAAM,CAAG,CAAC,CAAE,MAAO,KAAI,CAC9C,CAEA;AACA,GAAIL,MAAM,GAAKC,MAAM,CAAE,CACrB,IAAK,GAAI,CAAAM,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGjB,KAAK,CAACe,MAAM,CAAEE,CAAC,EAAE,CAAE,CACrC,GAAIjB,KAAK,CAACiB,CAAC,CAAC,CAACA,CAAC,CAAC,GAAKZ,IAAI,CAAE,MAAM,IAC3B,IAAIY,CAAC,GAAKjB,KAAK,CAACe,MAAM,CAAG,CAAC,CAAE,MAAO,KAAI,CAC9C,CACF,CAEA;AACA,GAAIG,QAAQ,CAACR,MAAM,CAAC,CAAGQ,QAAQ,CAACP,MAAM,CAAC,GAAK,CAAC,CAAE,CAC7C,IAAK,GAAI,CAAAM,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGjB,KAAK,CAACe,MAAM,CAAEE,CAAC,EAAE,CAAE,CACrC,GAAIjB,KAAK,CAACiB,CAAC,CAAC,CAAC,CAAC,CAAGA,CAAC,CAAC,GAAKZ,IAAI,CAAE,MAAM,IAC/B,IAAIY,CAAC,GAAKjB,KAAK,CAACe,MAAM,CAAG,CAAC,CAAE,MAAO,KAAI,CAC9C,CACF,CAEA,MAAO,MAAK,CACd,CAAC,CAED;AACA,KAAM,CAAAI,KAAK,CAAGA,CAAA,GAAM,CAClB,GAAI,CAAAC,KAAK,CAAG,CAAC,GAAGb,SAAS,CAAC,CAE1B,KAAM,CAAAc,UAAU,CAAGD,KAAK,CAACE,KAAK,CAAC,CAAC,CAChC,GAAI,CAAAC,GAAG,CAAGC,QAAQ,CAACC,cAAc,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAGA,UAAU,CAAC,CAAC,CAAC,CAAC,CAChEE,GAAG,CAACG,SAAS,CAAG,KAAK,CAErBlB,QAAQ,CAAC,EAAE,CAAC,CACZF,OAAO,CAAC,GAAG,CAAC,CACZL,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,IAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAE1D,CAAC,CAED,KAAM,CAAAwB,IAAI,CAAIC,CAAC,EAAK,CAClB,KAAM,CAAAlB,MAAM,CAAGkB,CAAC,CAACC,MAAM,CAACC,YAAY,CAAC,SAAS,CAAC,CAC/C,KAAM,CAAAnB,MAAM,CAAGiB,CAAC,CAACC,MAAM,CAACC,YAAY,CAAC,SAAS,CAAC,CAE/C;AACA,GAAI9B,KAAK,CAACU,MAAM,CAAC,CAACC,MAAM,CAAC,GAAK,EAAE,CAAE,OAGlC;AACA,GAAI,CAAAoB,QAAQ,CAAG,CAAC,GAAG/B,KAAK,CAAC,CACzB,GAAI,CAAAoB,KAAK,CAAG,CAAC,GAAGb,SAAS,CAAC,CAC1BwB,QAAQ,CAACrB,MAAM,CAAC,CAACC,MAAM,CAAC,CAAGN,IAAI,CAE/B;AACA,GAAIe,KAAK,CAACL,MAAM,GAAK,CAAC,CAAE,CACtB,KAAM,CAAAiB,KAAK,CAAGZ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzB,KAAM,CAAAa,KAAK,CAAGb,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEzB,GAAI,CAAAG,GAAG,CAAGC,QAAQ,CAACC,cAAc,CAACO,KAAK,CAAGC,KAAK,CAAC,CAChDV,GAAG,CAACG,SAAS,CAAGH,GAAG,CAACG,SAAS,CAAG,QAAQ,CAC1C,CAEA;AACA,GAAIN,KAAK,CAACL,MAAM,CAAG,CAAC,CAAE,CACpB,KAAM,CAAAM,UAAU,CAAGD,KAAK,CAACE,KAAK,CAAC,CAAC,CAChCS,QAAQ,CAACV,UAAU,CAAC,CAAC,CAAC,CAAC,CAACA,UAAU,CAAC,CAAC,CAAC,CAAC,CAAG,EAAE,CAE3C,KAAM,CAAAW,KAAK,CAAGZ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzB,KAAM,CAAAa,KAAK,CAAGb,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAEzB,GAAI,CAAAG,GAAG,CAAGC,QAAQ,CAACC,cAAc,CAACO,KAAK,CAAGC,KAAK,CAAC,CAChDV,GAAG,CAACG,SAAS,CAAGH,GAAG,CAACG,SAAS,CAAG,QAAQ,CAExCH,GAAG,CAAGC,QAAQ,CAACC,cAAc,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAGA,UAAU,CAAC,CAAC,CAAC,CAAC,CAC5DT,OAAO,CAACC,GAAG,CAACU,GAAG,CAAC,CAChBA,GAAG,CAACG,SAAS,CAAG,KAAK,CACvB,CAEAzB,QAAQ,CAAC8B,QAAQ,CAAC,CAClBX,KAAK,CAACc,IAAI,CAAC,CAACxB,MAAM,CAAEC,MAAM,CAAC,CAAC,CAC5BH,QAAQ,CAACY,KAAK,CAAC,CAEf,GAAIX,QAAQ,CAACC,MAAM,CAAEC,MAAM,CAAC,CAAE,CAC5BwB,KAAK,CAAC,UAAU,CAAC,CACnB,CAEA,GAAI9B,IAAI,GAAK,GAAG,CAAEC,OAAO,CAAC,GAAG,CAAC,CAAC,IAC1B,CAAAA,OAAO,CAAC,GAAG,CAAC,CACnB,CAAC,CAED,mBACER,KAAA,QAAK4B,SAAS,CAAC,MAAM,CAAAU,QAAA,eAEnBxC,IAAA,SAAM8B,SAAS,CAAC,OAAO,CAAAU,QAAA,CAAC,WAExB,CAAM,CAAC,cAEPtC,KAAA,SAAM4B,SAAS,CAAC,WAAW,CAAAU,QAAA,EAAC,OACrB,CAAC/B,IAAI,CAAC,UACb,EAAM,CAAC,cAEPT,IAAA,QAAK8B,SAAS,CAAC,OAAO,CAAAU,QAAA,CAElBpC,KAAK,CAACI,GAAG,CAAC,CAACiC,OAAO,CAAErB,CAAC,GACnBqB,OAAO,CAACjC,GAAG,CAAC,CAACkC,MAAM,CAAExB,CAAC,gBACpBlB,IAAA,QAAK8B,SAAS,CAAC,KAAK,CAACa,OAAO,CAAEZ,IAAK,CAACa,EAAE,CAAExB,CAAC,CAACyB,QAAQ,CAAC,CAAC,CAAG3B,CAAC,CAAC2B,QAAQ,CAAC,CAAE,CAAmC,UAASzB,CAAE,CAAC,UAASF,CAAE,CAAAsB,QAAA,CAAEE,MAAM,EAA5DtB,CAAC,CAACyB,QAAQ,CAAC,CAAC,CAAG3B,CAAC,CAAC2B,QAAQ,CAAC,CAAwC,CAC9I,CACF,CAAC,CAEA,CAAC,cAEN7C,IAAA,WAAQ8B,SAAS,CAAC,cAAc,CAACa,OAAO,CAAEpB,KAAM,CAAAiB,QAAA,CAAC,OAAK,CAAQ,CAAC,EAC5D,CAAC,CAEV,CAEA,cAAe,CAAArC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}