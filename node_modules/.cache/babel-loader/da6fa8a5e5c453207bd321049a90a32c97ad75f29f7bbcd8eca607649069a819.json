{"ast":null,"code":"import { AnimationType } from '../render/utils/types.mjs';\nimport { useDomEvent } from '../events/use-dom-event.mjs';\nimport { useRef, useCallback } from 'react';\nfunction useFocusGesture(_ref) {\n  let {\n    whileFocus,\n    visualElement\n  } = _ref;\n  const isFocusActive = useRef(false);\n  const {\n    animationState\n  } = visualElement;\n  const onFocus = useCallback(() => {\n    let isFocusVisible = false;\n    /**\n     * If this element doesn't match focus-visible then don't\n     * apply whileHover. But, if matches throws that focus-visible\n     * is not a valid selector then in that browser outline styles will be applied\n     * to the element by default and we want to match that behaviour with whileFocus.\n     */\n    try {\n      isFocusVisible = visualElement.current.matches(\":focus-visible\");\n    } catch (e) {\n      isFocusVisible = true;\n    }\n    if (!isFocusVisible || !animationState) return;\n    animationState.setActive(AnimationType.Focus, true);\n    isFocusActive.current = true;\n  }, [animationState]);\n  const onBlur = useCallback(() => {\n    if (!isFocusActive.current || !animationState) return;\n    animationState.setActive(AnimationType.Focus, false);\n    isFocusActive.current = false;\n  }, [animationState]);\n  useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n  useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\nexport { useFocusGesture };","map":{"version":3,"names":["AnimationType","useDomEvent","useRef","useCallback","useFocusGesture","_ref","whileFocus","visualElement","isFocusActive","animationState","onFocus","isFocusVisible","current","matches","e","setActive","Focus","onBlur","undefined"],"sources":["/home/roan/tanuarta.github.io/tanuarta/node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs"],"sourcesContent":["import { AnimationType } from '../render/utils/types.mjs';\nimport { useDomEvent } from '../events/use-dom-event.mjs';\nimport { useRef, useCallback } from 'react';\n\nfunction useFocusGesture({ whileFocus, visualElement, }) {\n    const isFocusActive = useRef(false);\n    const { animationState } = visualElement;\n    const onFocus = useCallback(() => {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = visualElement.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !animationState)\n            return;\n        animationState.setActive(AnimationType.Focus, true);\n        isFocusActive.current = true;\n    }, [animationState]);\n    const onBlur = useCallback(() => {\n        if (!isFocusActive.current || !animationState)\n            return;\n        animationState.setActive(AnimationType.Focus, false);\n        isFocusActive.current = false;\n    }, [animationState]);\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,2BAA2B;AACzD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAE3C,SAASC,eAAeA,CAAAC,IAAA,EAAiC;EAAA,IAAhC;IAAEC,UAAU;IAAEC;EAAe,CAAC,GAAAF,IAAA;EACnD,MAAMG,aAAa,GAAGN,MAAM,CAAC,KAAK,CAAC;EACnC,MAAM;IAAEO;EAAe,CAAC,GAAGF,aAAa;EACxC,MAAMG,OAAO,GAAGP,WAAW,CAAC,MAAM;IAC9B,IAAIQ,cAAc,GAAG,KAAK;IAC1B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI;MACAA,cAAc,GAAGJ,aAAa,CAACK,OAAO,CAACC,OAAO,CAAC,gBAAgB,CAAC;IACpE,CAAC,CACD,OAAOC,CAAC,EAAE;MACNH,cAAc,GAAG,IAAI;IACzB;IACA,IAAI,CAACA,cAAc,IAAI,CAACF,cAAc,EAClC;IACJA,cAAc,CAACM,SAAS,CAACf,aAAa,CAACgB,KAAK,EAAE,IAAI,CAAC;IACnDR,aAAa,CAACI,OAAO,GAAG,IAAI;EAChC,CAAC,EAAE,CAACH,cAAc,CAAC,CAAC;EACpB,MAAMQ,MAAM,GAAGd,WAAW,CAAC,MAAM;IAC7B,IAAI,CAACK,aAAa,CAACI,OAAO,IAAI,CAACH,cAAc,EACzC;IACJA,cAAc,CAACM,SAAS,CAACf,aAAa,CAACgB,KAAK,EAAE,KAAK,CAAC;IACpDR,aAAa,CAACI,OAAO,GAAG,KAAK;EACjC,CAAC,EAAE,CAACH,cAAc,CAAC,CAAC;EACpBR,WAAW,CAACM,aAAa,EAAE,OAAO,EAAED,UAAU,GAAGI,OAAO,GAAGQ,SAAS,CAAC;EACrEjB,WAAW,CAACM,aAAa,EAAE,MAAM,EAAED,UAAU,GAAGW,MAAM,GAAGC,SAAS,CAAC;AACvE;AAEA,SAASd,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}